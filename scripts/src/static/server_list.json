{
  "attio": {
    "name": "Attio guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Attio CRM data and records",
    "tools": [
      {
        "name": "search_companies",
        "description": "Search for companies in Attio"
      },
      {
        "name": "read_company",
        "description": "Read a specific company by ID"
      },
      {
        "name": "create_company",
        "description": "Create a new company in Attio"
      },
      {
        "name": "update_company",
        "description": "Update an existing company in Attio"
      },
      {
        "name": "search_contacts",
        "description": "Search for contacts in Attio"
      },
      {
        "name": "read_contact",
        "description": "Read a specific contact by ID"
      },
      {
        "name": "create_contact",
        "description": "Create a new contact in Attio"
      },
      {
        "name": "update_contact",
        "description": "Update an existing contact in Attio"
      },
      {
        "name": "list_lists",
        "description": "List available lists in Attio"
      },
      {
        "name": "read_list",
        "description": "Read a specific list by ID"
      },
      {
        "name": "add_to_list",
        "description": "Add a record to a list in Attio"
      }
    ],
    "server_id": "attio",
    "documentation": "attio/README.md",
    "readme_content": "# Attio Server\n\nguMCP server implementation for interacting with Attio.\n\n### Prerequisites\n\n- Python 3.11+\n- An Attio account and API access\n- An Attio OAuth App key with appropriate permissions for (see [Attio API documentation](https://developers.attio.com/docs/integrations)):\n  - Reading companies and contacts\n  - Writing companies and contacts\n  - Managing lists\n\n### Local Authentication\n\nLocal authentication uses an API key configuration JSON file:\n\n```\nlocal_auth/oauth_configs/attio/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"http://xxxxxxxxxxxxx\"\n}\n```\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/attio/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server attio --user-id local\n```\n"
  },
  "linear": {
    "name": "Linear guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Linear issue tracking and project management",
    "tools": [
      {
        "name": "search_issues",
        "description": "Search for issues in Linear"
      },
      {
        "name": "create_issue",
        "description": "Create a new issue in Linear"
      },
      {
        "name": "update_issue",
        "description": "Update an existing issue in Linear"
      }
    ],
    "server_id": "linear",
    "documentation": "linear/README.md",
    "readme_content": "# Linear Server\n\nguMCP server implementation for interacting with Linear issue tracking.\n\n### Prerequisites\n\n- Python 3.11+\n- A Linear App ([Linear OAuth Authentication](https://developers.linear.app/docs/oauth/authentication))\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```json\nlocal_auth/oauth_configs/linear/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"xxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\nWhen authorizing users, the server will automatically:\n\n1. Redirect to Linear's authorization URL with your configured credentials\n2. Exchange the received code for an access token using Linear's OAuth endpoints\n\nFor local development, you can authenticate using:\n\n```bash\npython src/servers/linear/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "gcalendar": {
    "name": "Google Calendar guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Google Calendar events and schedules",
    "tools": [
      {
        "name": "list_events",
        "description": "List events from Google Calendar for a specified time range"
      },
      {
        "name": "create_event",
        "description": "Create a new event in Google Calendar"
      },
      {
        "name": "update_event",
        "description": "Update an existing event in Google Calendar"
      }
    ],
    "server_id": "gcalendar",
    "documentation": "gcalendar/README.md",
    "readme_content": "# Google Calendar Server\n\nguMCP server implementation for interacting with Google Calendar.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Calendar API enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/calendar\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Calendar API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/calendar\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gcalendar/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gcalendar/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "gdrive": {
    "name": "Google Drive guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for searching and accessing files in Google Drive",
    "tools": [
      {
        "name": "search",
        "description": "Search for files in Google Drive"
      }
    ],
    "server_id": "gdrive",
    "documentation": "gdrive/README.md",
    "readme_content": "# Google Drive Server\n\nguMCP server implementation for interacting with Google Drive.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Drive APIs enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/drive.file\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API and Google Docs API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/drive.file\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gdrive/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gdrive/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "airtable": {
    "name": "Airtable guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Airtable bases and records",
    "tools": [
      {
        "name": "read_records",
        "description": "Read records from an Airtable table"
      },
      {
        "name": "create_records",
        "description": "Create new records in an Airtable table"
      },
      {
        "name": "update_records",
        "description": "Update existing records in an Airtable table"
      }
    ],
    "server_id": "airtable",
    "documentation": "airtable/README.md",
    "readme_content": "# Airtable Server\n\nguMCP server implementation for interacting with Airtable.\n\n### Prerequisites\n\n- Python 3.11+\n- An Airtable account and API access\n- An Airtable OAuth application with the following scopes (see [Airtable OAuth documentation](https://airtable.com/developers/web/guides/oauth-integrations)):\n  - data.records:read\n  - data.records:write\n  - schema.bases:read\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/airtable/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/airtable/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server airtable --user-id local\n```\n"
  },
  "perplexity": {
    "name": "Perplexity guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for searching the web and chatting with Perplexity AI",
    "tools": [
      {
        "name": "search",
        "description": "Search the web using Perplexity's API"
      },
      {
        "name": "chat",
        "description": "Send a message to Perplexity model without forcing web search"
      }
    ],
    "server_id": "perplexity",
    "documentation": "perplexity/README.md",
    "readme_content": "# Perplexity Server\n\nguMCP server implementation for interacting with Perplexity AI's API.\n\n### Prerequisites\n\n- Python 3.11+\n- A Perplexity API key (obtain from [Perplexity AI](https://www.perplexity.ai/))\n\n### Features\n\n- Web search with recency filters (hour, day, week, month, year)\n- Chat with different Perplexity models:\n  - sonar\n  - sonar-pro\n  - sonar-deep-research\n  - sonar-reasoning\n  - sonar-reasoning-pro\n- Code assistance with customizable language settings\n- Related questions retrieval\n\n### Local Authentication\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/perplexity/main.py auth\n```\n\nYou will be prompted to enter in your Perplexity API key\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server perplexity --user-id local\n```\n"
  },
  "gsheets": {
    "name": "Google Sheets guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Google Sheets",
    "tools": [
      {
        "name": "get_spreadsheet_info",
        "description": "Retrieves spreadsheet metadata (title, sheets, etc.)"
      },
      {
        "name": "get_sheet_names",
        "description": "Lists all sheet (tab) names in a spreadsheet"
      },
      {
        "name": "create_google_sheet",
        "description": "Creates a new Google Sheets document"
      },
      {
        "name": "batch_get",
        "description": "Reads values from multiple ranges"
      },
      {
        "name": "batch_update",
        "description": "Writes values to multiple ranges"
      },
      {
        "name": "append_values",
        "description": "Appends values to the end of a range (like inserting rows)"
      },
      {
        "name": "lookup_spreadsheet_row",
        "description": "Searches for a row by column value in a specified range"
      },
      {
        "name": "clear_values",
        "description": "Clears values from a given range"
      },
      {
        "name": "copy_sheet",
        "description": "Copies a sheet from one spreadsheet to another"
      }
    ],
    "server_id": "gsheets",
    "documentation": "gsheets/README.md",
    "readme_content": "# Google Sheets Server\n\nguMCP server implementation for interacting with Google Sheets.\n\n---\n\n### \ud83d\udce6 Prerequisites\n\n- Python 3.11+\n- A Google Cloud project with the **Google Sheets API enabled**\n- OAuth 2.0 credentials configured for desktop application access\n\n---\n\n### \ud83d\udd10 Local Authentication\n\nLocal authentication uses a Google OAuth Configuration JSON file located at:\n\n```\nlocal_auth/oauth_configs/gsheets/oauth.json\n```\n\nThis file can be obtained when you are creating an oauth client from google cloud applciation in the GCP console.\n\nTo authenticate and save credentials for local testing, run:\n\n```bash\npython src/servers/gsheets/main.py auth\n```\n\nAfter successful authentication, your credentials will be stored securely for reuse.\n\n---\n\n### \ud83d\udee0\ufe0f Supported Tools\n\nThis server exposes the following tools for interacting with Google Sheets:\n\n- `create-sheet` \u2013 Create a new spreadsheet\n- `get-spreadsheet-info` \u2013 Retrieve spreadsheet metadata\n- `get-sheet-names` \u2013 List sheet/tab names\n- `batch-get` \u2013 Read values from multiple ranges\n- `batch-update` \u2013 Write values to multiple ranges\n- `append-values` \u2013 Append new rows to a sheet\n- `lookup-row` \u2013 Search for a row by value\n- `clear-values` \u2013 Clear a given sheet range\n- `copy-sheet` \u2013 Copy a sheet from one spreadsheet to another\n\n---\n\n### \u25b6\ufe0f Run\n\n#### Local Development\n\nYou can launch the server for local development using:\n\n```bash\n./start_remote_dev_server.sh\n```\n\nThis will start the MCP server and make it available for integration and testing.\n\nYou can also start the local client using the following -\n\n```bash\npython RemoteMCPTestClient.py --endpoint http://localhost:8000/gsheets/local\n```\n\n---\n\n### \ud83d\udcce Notes\n\n- Ensure your OAuth app has **Sheets API access** enabled in the Google Cloud console.\n- If you're testing with multiple users or environments, use different `user_id` values.\n- This server is designed to integrate with guMCP agents for tool-based LLM workflows.\n- Make sure you have mentioned the anthropic API key in the .env file.\n\n---\n\n### \ud83d\udcda Resources\n\n- [Google Sheets API Documentation](https://developers.google.com/sheets/api)\n- [OAuth 2.0 in Google APIs](https://developers.google.com/identity/protocols/oauth2)\n"
  },
  "slack": {
    "name": "Slack guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Slack channels and messages",
    "tools": [
      {
        "name": "read_messages",
        "description": "Read messages from a Slack channel"
      },
      {
        "name": "send_message",
        "description": "Send a message to a Slack channel or user"
      },
      {
        "name": "create_canvas",
        "description": "Create a Slack canvas message with rich content"
      }
    ],
    "server_id": "slack",
    "documentation": "slack/README.md",
    "readme_content": "# Slack Server\n\nguMCP server implementation for interacting with Slack.\n\n### Prerequisites\n\n- Python 3.11+\n- A Slack App ([Create Slack App](https://api.slack.com/quickstart#creating)) with the following scopes:\n  - channels:history\n  - channels:read\n  - chat:write\n  - chat:write.customize\n  - users:read\n\n### Local Authentication\n\nLocal authentication uses a OAuth Configuration JSON file:\n\n```\nlocal_auth/oauth_configs/slack/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\n- Note: Slack requires https for the redirect uri, so if running locally, setup an [ngrok redirect](https://ngrok.com/docs/universal-gateway/http/) to port 8080\n\nTo set up and verify authentication, run:\n\n```bash\npython src/servers/slack/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server slack --user-id local\n```\n"
  },
  "gdocs": {
    "name": "Google Docs guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for creating and managing Google Docs documents",
    "tools": [
      {
        "name": "search_docs",
        "description": "Search for Google Docs in Drive"
      },
      {
        "name": "create_doc",
        "description": "Create a new Google Doc"
      },
      {
        "name": "append_to_doc",
        "description": "Append content to an existing Google Doc"
      },
      {
        "name": "update_doc",
        "description": "Update content in an existing Google Doc"
      }
    ],
    "server_id": "gdocs",
    "documentation": "gdocs/README.md",
    "readme_content": "# Google Docs Server\n\nguMCP server implementation for interacting with Google Docs.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Google Drive and Google Docs APIs enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/drive.file\n  - https://www.googleapis.com/auth/documents\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API and Google Docs API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes:\n   - https://www.googleapis.com/auth/drive.file\n   - https://www.googleapis.com/auth/documents\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gdocs/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gdocs/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "gmail": {
    "name": "Gmail guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for interacting with Gmail emails and messages",
    "tools": [
      {
        "name": "read_emails",
        "description": "Search and read emails in Gmail"
      },
      {
        "name": "send_email",
        "description": "Send an email through Gmail"
      },
      {
        "name": "update_email",
        "description": "Update email labels (mark as read/unread, move to folders)"
      }
    ],
    "server_id": "gmail",
    "documentation": "gmail/README.md",
    "readme_content": "# Gmail Server\n\nguMCP server implementation for interacting with Gmail.\n\n### Prerequisites\n\n- Python 3.11+\n- A Google Cloud Project with Gmail API enabled\n- OAuth 2.0 credentials with the following scopes:\n  - https://www.googleapis.com/auth/gmail.modify\n\n### Local Authentication\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Gmail API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scope `https://www.googleapis.com/auth/gmail.modify`\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `oauth.json` and place into the `local_auth/oauth_configs/gmail/oauth.json`\n\nTo authenticate and save credentials:\n\n```bash\npython src/servers/gmail/main.py auth\n```\n\nThis will launch a browser-based authentication flow to obtain and save credentials.\n"
  },
  "outlook": {
    "name": "Outlook guMCP Server",
    "icon": "assets/icon.png",
    "description": "Server for reading and sending emails through Microsoft Outlook",
    "tools": [
      {
        "name": "read_emails",
        "description": "Read emails from Outlook. Fetches emails based on specified filters."
      },
      {
        "name": "send_email",
        "description": "Send an email using Outlook"
      }
    ],
    "server_id": "outlook",
    "documentation": "outlook/README.md",
    "readme_content": "# Outlook Server\n\nguMCP server implementation for interacting with Microsoft Outlook.\n\n### Prerequisites\n\n- Python 3.11+\n- A Microsoft Entra ID (formerly Azure AD) application registration\n- OAuth 2.0 credentials with the following scopes:\n  - https://graph.microsoft.com/Mail.ReadWrite\n  - https://graph.microsoft.com/Mail.Send\n  - offline_access\n\n### Local Authentication\n\n1. [Register a new application in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app?tabs=certificate%2Cexpose-a-web-api)\n2. Add the required Microsoft Graph API permissions (Mail.ReadWrite, Mail.Send)\n3. Configure a redirect URI for your application (e.g., http://localhost:8080)\n4. Get your application's client ID and client secret\n5. Create an `oauth.json` file:\n\n```\nlocal_auth/oauth_configs/outlook/oauth.json\n```\n\nCreate the following file with the relevant attributes for your app:\n\n```json\n{\n  \"client_id\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"client_secret\": \"xxxxxxxxxxxxxxxxxxxxx\",\n  \"redirect_uri\": \"https://xxxxxxxxxxxxx\"\n}\n```\n\n6. To set up and verify authentication, run:\n\n```bash\npython src/servers/outlook/main.py auth\n```\n\n### Run\n\n#### Local Development\n\n```bash\npython src/servers/local.py --server outlook --user-id local\n```\n"
  }
}